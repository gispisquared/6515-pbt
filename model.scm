;;; Model-based testing
; We want to be able to provide a unified interface to models:

(define ((run-model gen-model) commands)
  (define model (gen-model))
  (reverse
    (let lp ((commands commands) (output '()))
      (if (null? commands) output
        (lp (cdr commands)
            (cons (apply model (car commands)) output))))))

; a model will take in a command: (model command)
; the command is generated by one of a user-provided list of command generators

(define ((commands-gen commands-gens max-len))
  (define (command)
    (((random-choice commands-gens))))
  ((list-of command ((integer 0 max-len)))))

(define ((run-both-models gen-model1 gen-model2) commands)
  (cons ((run-model gen-model1) commands) ((run-model gen-model2) commands)))
